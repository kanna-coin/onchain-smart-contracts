/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../common";

export declare namespace KannaAuditAnswers {
  export type AnswerStruct = {
    wallet: PromiseOrValue<string>;
    questionId: PromiseOrValue<BytesLike>;
    answer: PromiseOrValue<BytesLike>;
  };

  export type AnswerStructOutput = [string, string, string] & {
    wallet: string;
    questionId: string;
    answer: string;
  };
}

export interface KannaAuditAnswersInterface extends utils.Interface {
  functions: {
    "finalize()": FunctionFragment;
    "getPoints(address)": FunctionFragment;
    "getQuestionAnswers(string)": FunctionFragment;
    "getQuestionAnswers(bytes32)": FunctionFragment;
    "getQuestionIds()": FunctionFragment;
    "getQuestionPoints(bytes32)": FunctionFragment;
    "getQuestionPoints(string)": FunctionFragment;
    "getQuestionWallets(string)": FunctionFragment;
    "getQuestionWallets(bytes32)": FunctionFragment;
    "getScore(address)": FunctionFragment;
    "getWalletAnswer(string,address)": FunctionFragment;
    "getWalletAnswer(bytes32,address)": FunctionFragment;
    "getWalletAnswers(address)": FunctionFragment;
    "owner()": FunctionFragment;
    "questionAnswers(bytes32,address)": FunctionFragment;
    "registerQuestion(string,uint8,string[])": FunctionFragment;
    "registerQuestions(string[],uint8[],string[][])": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "setAnswer(string,string)": FunctionFragment;
    "setAnswerKey(string,string,string[])": FunctionFragment;
    "setAnswerKeys(string[],string[],string[][])": FunctionFragment;
    "setAnswers(string[],string[])": FunctionFragment;
    "setWalletAnswer(address,string,string)": FunctionFragment;
    "setWalletAnswers(address,string[],string[])": FunctionFragment;
    "stakePool()": FunctionFragment;
    "status()": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
    "totalPoints()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "finalize"
      | "getPoints"
      | "getQuestionAnswers(string)"
      | "getQuestionAnswers(bytes32)"
      | "getQuestionIds"
      | "getQuestionPoints(bytes32)"
      | "getQuestionPoints(string)"
      | "getQuestionWallets(string)"
      | "getQuestionWallets(bytes32)"
      | "getScore"
      | "getWalletAnswer(string,address)"
      | "getWalletAnswer(bytes32,address)"
      | "getWalletAnswers"
      | "owner"
      | "questionAnswers"
      | "registerQuestion"
      | "registerQuestions"
      | "renounceOwnership"
      | "setAnswer"
      | "setAnswerKey"
      | "setAnswerKeys"
      | "setAnswers"
      | "setWalletAnswer"
      | "setWalletAnswers"
      | "stakePool"
      | "status"
      | "supportsInterface"
      | "totalPoints"
      | "transferOwnership"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "finalize", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getPoints",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getQuestionAnswers(string)",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getQuestionAnswers(bytes32)",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "getQuestionIds",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getQuestionPoints(bytes32)",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "getQuestionPoints(string)",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getQuestionWallets(string)",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getQuestionWallets(bytes32)",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "getScore",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getWalletAnswer(string,address)",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getWalletAnswer(bytes32,address)",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getWalletAnswers",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "questionAnswers",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "registerQuestion",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "registerQuestions",
    values: [
      PromiseOrValue<string>[],
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<string>[][]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setAnswer",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setAnswerKey",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setAnswerKeys",
    values: [
      PromiseOrValue<string>[],
      PromiseOrValue<string>[],
      PromiseOrValue<string>[][]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setAnswers",
    values: [PromiseOrValue<string>[], PromiseOrValue<string>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "setWalletAnswer",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setWalletAnswers",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>[],
      PromiseOrValue<string>[]
    ]
  ): string;
  encodeFunctionData(functionFragment: "stakePool", values?: undefined): string;
  encodeFunctionData(functionFragment: "status", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "totalPoints",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [PromiseOrValue<string>]
  ): string;

  decodeFunctionResult(functionFragment: "finalize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getPoints", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getQuestionAnswers(string)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getQuestionAnswers(bytes32)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getQuestionIds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getQuestionPoints(bytes32)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getQuestionPoints(string)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getQuestionWallets(string)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getQuestionWallets(bytes32)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getScore", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getWalletAnswer(string,address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getWalletAnswer(bytes32,address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getWalletAnswers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "questionAnswers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerQuestion",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerQuestions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setAnswer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setAnswerKey",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setAnswerKeys",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setAnswers", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setWalletAnswer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setWalletAnswers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "stakePool", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "status", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalPoints",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;

  events: {
    "AnswerKeySet(bytes32,uint256)": EventFragment;
    "AnswerSet(address,bytes32,uint256)": EventFragment;
    "Finalized(uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "QuestionRegistered(bytes32,uint8,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AnswerKeySet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AnswerSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Finalized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "QuestionRegistered"): EventFragment;
}

export interface AnswerKeySetEventObject {
  questionId: string;
  timestamp: BigNumber;
}
export type AnswerKeySetEvent = TypedEvent<
  [string, BigNumber],
  AnswerKeySetEventObject
>;

export type AnswerKeySetEventFilter = TypedEventFilter<AnswerKeySetEvent>;

export interface AnswerSetEventObject {
  wallet: string;
  questionId: string;
  timestamp: BigNumber;
}
export type AnswerSetEvent = TypedEvent<
  [string, string, BigNumber],
  AnswerSetEventObject
>;

export type AnswerSetEventFilter = TypedEventFilter<AnswerSetEvent>;

export interface FinalizedEventObject {
  timestamp: BigNumber;
}
export type FinalizedEvent = TypedEvent<[BigNumber], FinalizedEventObject>;

export type FinalizedEventFilter = TypedEventFilter<FinalizedEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface QuestionRegisteredEventObject {
  questionId: string;
  points: number;
  timestamp: BigNumber;
}
export type QuestionRegisteredEvent = TypedEvent<
  [string, number, BigNumber],
  QuestionRegisteredEventObject
>;

export type QuestionRegisteredEventFilter =
  TypedEventFilter<QuestionRegisteredEvent>;

export interface KannaAuditAnswers extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: KannaAuditAnswersInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    finalize(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getPoints(
      wallet: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "getQuestionAnswers(string)"(
      questionUuid: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[KannaAuditAnswers.AnswerStructOutput[]]>;

    "getQuestionAnswers(bytes32)"(
      questionId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[KannaAuditAnswers.AnswerStructOutput[]]>;

    getQuestionIds(overrides?: CallOverrides): Promise<[string[]]>;

    "getQuestionPoints(bytes32)"(
      questionId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[number]>;

    "getQuestionPoints(string)"(
      questionUuid: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[number]>;

    "getQuestionWallets(string)"(
      questionUuid: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string[]]>;

    "getQuestionWallets(bytes32)"(
      questionId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string[]]>;

    getScore(
      wallet: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "getWalletAnswer(string,address)"(
      questionUuid: PromiseOrValue<string>,
      wallet: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    "getWalletAnswer(bytes32,address)"(
      questionId: PromiseOrValue<BytesLike>,
      wallet: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getWalletAnswers(
      wallet: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[KannaAuditAnswers.AnswerStructOutput[]]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    questionAnswers(
      arg0: PromiseOrValue<BytesLike>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    registerQuestion(
      questionUuid: PromiseOrValue<string>,
      points: PromiseOrValue<BigNumberish>,
      options: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    registerQuestions(
      questionsUuid: PromiseOrValue<string>[],
      points: PromiseOrValue<BigNumberish>[],
      options: PromiseOrValue<string>[][],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setAnswer(
      questionUuid: PromiseOrValue<string>,
      answer: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setAnswerKey(
      questionUuid: PromiseOrValue<string>,
      answerKey: PromiseOrValue<string>,
      alternatives: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setAnswerKeys(
      questionsUuid: PromiseOrValue<string>[],
      answerKeys: PromiseOrValue<string>[],
      alternatives: PromiseOrValue<string>[][],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setAnswers(
      questionsUuid: PromiseOrValue<string>[],
      answers: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setWalletAnswer(
      wallet: PromiseOrValue<string>,
      questionUuid: PromiseOrValue<string>,
      answer: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setWalletAnswers(
      wallet: PromiseOrValue<string>,
      questionsUuid: PromiseOrValue<string>[],
      answers: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    stakePool(overrides?: CallOverrides): Promise<[string]>;

    status(overrides?: CallOverrides): Promise<[number]>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    totalPoints(overrides?: CallOverrides): Promise<[number]>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  finalize(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getPoints(
    wallet: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "getQuestionAnswers(string)"(
    questionUuid: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<KannaAuditAnswers.AnswerStructOutput[]>;

  "getQuestionAnswers(bytes32)"(
    questionId: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<KannaAuditAnswers.AnswerStructOutput[]>;

  getQuestionIds(overrides?: CallOverrides): Promise<string[]>;

  "getQuestionPoints(bytes32)"(
    questionId: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<number>;

  "getQuestionPoints(string)"(
    questionUuid: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<number>;

  "getQuestionWallets(string)"(
    questionUuid: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string[]>;

  "getQuestionWallets(bytes32)"(
    questionId: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<string[]>;

  getScore(
    wallet: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "getWalletAnswer(string,address)"(
    questionUuid: PromiseOrValue<string>,
    wallet: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string>;

  "getWalletAnswer(bytes32,address)"(
    questionId: PromiseOrValue<BytesLike>,
    wallet: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string>;

  getWalletAnswers(
    wallet: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<KannaAuditAnswers.AnswerStructOutput[]>;

  owner(overrides?: CallOverrides): Promise<string>;

  questionAnswers(
    arg0: PromiseOrValue<BytesLike>,
    arg1: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string>;

  registerQuestion(
    questionUuid: PromiseOrValue<string>,
    points: PromiseOrValue<BigNumberish>,
    options: PromiseOrValue<string>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  registerQuestions(
    questionsUuid: PromiseOrValue<string>[],
    points: PromiseOrValue<BigNumberish>[],
    options: PromiseOrValue<string>[][],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setAnswer(
    questionUuid: PromiseOrValue<string>,
    answer: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setAnswerKey(
    questionUuid: PromiseOrValue<string>,
    answerKey: PromiseOrValue<string>,
    alternatives: PromiseOrValue<string>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setAnswerKeys(
    questionsUuid: PromiseOrValue<string>[],
    answerKeys: PromiseOrValue<string>[],
    alternatives: PromiseOrValue<string>[][],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setAnswers(
    questionsUuid: PromiseOrValue<string>[],
    answers: PromiseOrValue<string>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setWalletAnswer(
    wallet: PromiseOrValue<string>,
    questionUuid: PromiseOrValue<string>,
    answer: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setWalletAnswers(
    wallet: PromiseOrValue<string>,
    questionsUuid: PromiseOrValue<string>[],
    answers: PromiseOrValue<string>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  stakePool(overrides?: CallOverrides): Promise<string>;

  status(overrides?: CallOverrides): Promise<number>;

  supportsInterface(
    interfaceId: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  totalPoints(overrides?: CallOverrides): Promise<number>;

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    finalize(overrides?: CallOverrides): Promise<void>;

    getPoints(
      wallet: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getQuestionAnswers(string)"(
      questionUuid: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<KannaAuditAnswers.AnswerStructOutput[]>;

    "getQuestionAnswers(bytes32)"(
      questionId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<KannaAuditAnswers.AnswerStructOutput[]>;

    getQuestionIds(overrides?: CallOverrides): Promise<string[]>;

    "getQuestionPoints(bytes32)"(
      questionId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<number>;

    "getQuestionPoints(string)"(
      questionUuid: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<number>;

    "getQuestionWallets(string)"(
      questionUuid: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string[]>;

    "getQuestionWallets(bytes32)"(
      questionId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string[]>;

    getScore(
      wallet: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getWalletAnswer(string,address)"(
      questionUuid: PromiseOrValue<string>,
      wallet: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;

    "getWalletAnswer(bytes32,address)"(
      questionId: PromiseOrValue<BytesLike>,
      wallet: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;

    getWalletAnswers(
      wallet: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<KannaAuditAnswers.AnswerStructOutput[]>;

    owner(overrides?: CallOverrides): Promise<string>;

    questionAnswers(
      arg0: PromiseOrValue<BytesLike>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;

    registerQuestion(
      questionUuid: PromiseOrValue<string>,
      points: PromiseOrValue<BigNumberish>,
      options: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<void>;

    registerQuestions(
      questionsUuid: PromiseOrValue<string>[],
      points: PromiseOrValue<BigNumberish>[],
      options: PromiseOrValue<string>[][],
      overrides?: CallOverrides
    ): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    setAnswer(
      questionUuid: PromiseOrValue<string>,
      answer: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setAnswerKey(
      questionUuid: PromiseOrValue<string>,
      answerKey: PromiseOrValue<string>,
      alternatives: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<void>;

    setAnswerKeys(
      questionsUuid: PromiseOrValue<string>[],
      answerKeys: PromiseOrValue<string>[],
      alternatives: PromiseOrValue<string>[][],
      overrides?: CallOverrides
    ): Promise<void>;

    setAnswers(
      questionsUuid: PromiseOrValue<string>[],
      answers: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<void>;

    setWalletAnswer(
      wallet: PromiseOrValue<string>,
      questionUuid: PromiseOrValue<string>,
      answer: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setWalletAnswers(
      wallet: PromiseOrValue<string>,
      questionsUuid: PromiseOrValue<string>[],
      answers: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<void>;

    stakePool(overrides?: CallOverrides): Promise<string>;

    status(overrides?: CallOverrides): Promise<number>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    totalPoints(overrides?: CallOverrides): Promise<number>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "AnswerKeySet(bytes32,uint256)"(
      questionId?: PromiseOrValue<BytesLike> | null,
      timestamp?: null
    ): AnswerKeySetEventFilter;
    AnswerKeySet(
      questionId?: PromiseOrValue<BytesLike> | null,
      timestamp?: null
    ): AnswerKeySetEventFilter;

    "AnswerSet(address,bytes32,uint256)"(
      wallet?: PromiseOrValue<string> | null,
      questionId?: PromiseOrValue<BytesLike> | null,
      timestamp?: null
    ): AnswerSetEventFilter;
    AnswerSet(
      wallet?: PromiseOrValue<string> | null,
      questionId?: PromiseOrValue<BytesLike> | null,
      timestamp?: null
    ): AnswerSetEventFilter;

    "Finalized(uint256)"(timestamp?: null): FinalizedEventFilter;
    Finalized(timestamp?: null): FinalizedEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;

    "QuestionRegistered(bytes32,uint8,uint256)"(
      questionId?: PromiseOrValue<BytesLike> | null,
      points?: null,
      timestamp?: null
    ): QuestionRegisteredEventFilter;
    QuestionRegistered(
      questionId?: PromiseOrValue<BytesLike> | null,
      points?: null,
      timestamp?: null
    ): QuestionRegisteredEventFilter;
  };

  estimateGas: {
    finalize(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getPoints(
      wallet: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getQuestionAnswers(string)"(
      questionUuid: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getQuestionAnswers(bytes32)"(
      questionId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getQuestionIds(overrides?: CallOverrides): Promise<BigNumber>;

    "getQuestionPoints(bytes32)"(
      questionId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getQuestionPoints(string)"(
      questionUuid: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getQuestionWallets(string)"(
      questionUuid: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getQuestionWallets(bytes32)"(
      questionId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getScore(
      wallet: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getWalletAnswer(string,address)"(
      questionUuid: PromiseOrValue<string>,
      wallet: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getWalletAnswer(bytes32,address)"(
      questionId: PromiseOrValue<BytesLike>,
      wallet: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getWalletAnswers(
      wallet: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    questionAnswers(
      arg0: PromiseOrValue<BytesLike>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    registerQuestion(
      questionUuid: PromiseOrValue<string>,
      points: PromiseOrValue<BigNumberish>,
      options: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    registerQuestions(
      questionsUuid: PromiseOrValue<string>[],
      points: PromiseOrValue<BigNumberish>[],
      options: PromiseOrValue<string>[][],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setAnswer(
      questionUuid: PromiseOrValue<string>,
      answer: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setAnswerKey(
      questionUuid: PromiseOrValue<string>,
      answerKey: PromiseOrValue<string>,
      alternatives: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setAnswerKeys(
      questionsUuid: PromiseOrValue<string>[],
      answerKeys: PromiseOrValue<string>[],
      alternatives: PromiseOrValue<string>[][],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setAnswers(
      questionsUuid: PromiseOrValue<string>[],
      answers: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setWalletAnswer(
      wallet: PromiseOrValue<string>,
      questionUuid: PromiseOrValue<string>,
      answer: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setWalletAnswers(
      wallet: PromiseOrValue<string>,
      questionsUuid: PromiseOrValue<string>[],
      answers: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    stakePool(overrides?: CallOverrides): Promise<BigNumber>;

    status(overrides?: CallOverrides): Promise<BigNumber>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    totalPoints(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    finalize(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getPoints(
      wallet: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getQuestionAnswers(string)"(
      questionUuid: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getQuestionAnswers(bytes32)"(
      questionId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getQuestionIds(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getQuestionPoints(bytes32)"(
      questionId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getQuestionPoints(string)"(
      questionUuid: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getQuestionWallets(string)"(
      questionUuid: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getQuestionWallets(bytes32)"(
      questionId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getScore(
      wallet: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getWalletAnswer(string,address)"(
      questionUuid: PromiseOrValue<string>,
      wallet: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getWalletAnswer(bytes32,address)"(
      questionId: PromiseOrValue<BytesLike>,
      wallet: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getWalletAnswers(
      wallet: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    questionAnswers(
      arg0: PromiseOrValue<BytesLike>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    registerQuestion(
      questionUuid: PromiseOrValue<string>,
      points: PromiseOrValue<BigNumberish>,
      options: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    registerQuestions(
      questionsUuid: PromiseOrValue<string>[],
      points: PromiseOrValue<BigNumberish>[],
      options: PromiseOrValue<string>[][],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setAnswer(
      questionUuid: PromiseOrValue<string>,
      answer: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setAnswerKey(
      questionUuid: PromiseOrValue<string>,
      answerKey: PromiseOrValue<string>,
      alternatives: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setAnswerKeys(
      questionsUuid: PromiseOrValue<string>[],
      answerKeys: PromiseOrValue<string>[],
      alternatives: PromiseOrValue<string>[][],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setAnswers(
      questionsUuid: PromiseOrValue<string>[],
      answers: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setWalletAnswer(
      wallet: PromiseOrValue<string>,
      questionUuid: PromiseOrValue<string>,
      answer: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setWalletAnswers(
      wallet: PromiseOrValue<string>,
      questionsUuid: PromiseOrValue<string>[],
      answers: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    stakePool(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    status(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totalPoints(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
