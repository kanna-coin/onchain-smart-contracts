/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../common";

export interface KannaStockOptionInterface extends utils.Interface {
  functions: {
    "amountVested()": FunctionFragment;
    "cancel()": FunctionFragment;
    "canceled()": FunctionFragment;
    "cliff()": FunctionFragment;
    "completed()": FunctionFragment;
    "daysLeftToCancel()": FunctionFragment;
    "daysLeftToWithdraw()": FunctionFragment;
    "duration()": FunctionFragment;
    "holder()": FunctionFragment;
    "lock()": FunctionFragment;
    "owner()": FunctionFragment;
    "start()": FunctionFragment;
    "token()": FunctionFragment;
    "withdraw()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "amountVested"
      | "cancel"
      | "canceled"
      | "cliff"
      | "completed"
      | "daysLeftToCancel"
      | "daysLeftToWithdraw"
      | "duration"
      | "holder"
      | "lock"
      | "owner"
      | "start"
      | "token"
      | "withdraw"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "amountVested",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "cancel", values?: undefined): string;
  encodeFunctionData(functionFragment: "canceled", values?: undefined): string;
  encodeFunctionData(functionFragment: "cliff", values?: undefined): string;
  encodeFunctionData(functionFragment: "completed", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "daysLeftToCancel",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "daysLeftToWithdraw",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "duration", values?: undefined): string;
  encodeFunctionData(functionFragment: "holder", values?: undefined): string;
  encodeFunctionData(functionFragment: "lock", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "start", values?: undefined): string;
  encodeFunctionData(functionFragment: "token", values?: undefined): string;
  encodeFunctionData(functionFragment: "withdraw", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "amountVested",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "cancel", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "canceled", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "cliff", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "completed", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "daysLeftToCancel",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "daysLeftToWithdraw",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "duration", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "holder", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "lock", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "start", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "token", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;

  events: {
    "Canceled(address,address,uint256,uint256,uint256,uint256,uint256)": EventFragment;
    "Completed(address,address,uint256,uint256,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Canceled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Completed"): EventFragment;
}

export interface CanceledEventObject {
  owner: string;
  holder: string;
  amount: BigNumber;
  contractDuration: BigNumber;
  cliffDuration: BigNumber;
  cliffDurationElapsed: BigNumber;
  remainingCliffDuration: BigNumber;
}
export type CanceledEvent = TypedEvent<
  [string, string, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber],
  CanceledEventObject
>;

export type CanceledEventFilter = TypedEventFilter<CanceledEvent>;

export interface CompletedEventObject {
  owner: string;
  holder: string;
  amount: BigNumber;
  contractDuration: BigNumber;
  lockDuration: BigNumber;
  totalDurationElapsed: BigNumber;
}
export type CompletedEvent = TypedEvent<
  [string, string, BigNumber, BigNumber, BigNumber, BigNumber],
  CompletedEventObject
>;

export type CompletedEventFilter = TypedEventFilter<CompletedEvent>;

export interface KannaStockOption extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: KannaStockOptionInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    amountVested(overrides?: CallOverrides): Promise<[BigNumber]>;

    cancel(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    canceled(overrides?: CallOverrides): Promise<[boolean]>;

    cliff(overrides?: CallOverrides): Promise<[BigNumber]>;

    completed(overrides?: CallOverrides): Promise<[boolean]>;

    daysLeftToCancel(overrides?: CallOverrides): Promise<[BigNumber]>;

    daysLeftToWithdraw(overrides?: CallOverrides): Promise<[BigNumber]>;

    duration(overrides?: CallOverrides): Promise<[BigNumber]>;

    holder(overrides?: CallOverrides): Promise<[string]>;

    lock(overrides?: CallOverrides): Promise<[BigNumber]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    start(overrides?: CallOverrides): Promise<[BigNumber]>;

    token(overrides?: CallOverrides): Promise<[string]>;

    withdraw(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  amountVested(overrides?: CallOverrides): Promise<BigNumber>;

  cancel(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  canceled(overrides?: CallOverrides): Promise<boolean>;

  cliff(overrides?: CallOverrides): Promise<BigNumber>;

  completed(overrides?: CallOverrides): Promise<boolean>;

  daysLeftToCancel(overrides?: CallOverrides): Promise<BigNumber>;

  daysLeftToWithdraw(overrides?: CallOverrides): Promise<BigNumber>;

  duration(overrides?: CallOverrides): Promise<BigNumber>;

  holder(overrides?: CallOverrides): Promise<string>;

  lock(overrides?: CallOverrides): Promise<BigNumber>;

  owner(overrides?: CallOverrides): Promise<string>;

  start(overrides?: CallOverrides): Promise<BigNumber>;

  token(overrides?: CallOverrides): Promise<string>;

  withdraw(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    amountVested(overrides?: CallOverrides): Promise<BigNumber>;

    cancel(overrides?: CallOverrides): Promise<void>;

    canceled(overrides?: CallOverrides): Promise<boolean>;

    cliff(overrides?: CallOverrides): Promise<BigNumber>;

    completed(overrides?: CallOverrides): Promise<boolean>;

    daysLeftToCancel(overrides?: CallOverrides): Promise<BigNumber>;

    daysLeftToWithdraw(overrides?: CallOverrides): Promise<BigNumber>;

    duration(overrides?: CallOverrides): Promise<BigNumber>;

    holder(overrides?: CallOverrides): Promise<string>;

    lock(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<string>;

    start(overrides?: CallOverrides): Promise<BigNumber>;

    token(overrides?: CallOverrides): Promise<string>;

    withdraw(overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    "Canceled(address,address,uint256,uint256,uint256,uint256,uint256)"(
      owner?: PromiseOrValue<string> | null,
      holder?: PromiseOrValue<string> | null,
      amount?: null,
      contractDuration?: null,
      cliffDuration?: null,
      cliffDurationElapsed?: null,
      remainingCliffDuration?: null
    ): CanceledEventFilter;
    Canceled(
      owner?: PromiseOrValue<string> | null,
      holder?: PromiseOrValue<string> | null,
      amount?: null,
      contractDuration?: null,
      cliffDuration?: null,
      cliffDurationElapsed?: null,
      remainingCliffDuration?: null
    ): CanceledEventFilter;

    "Completed(address,address,uint256,uint256,uint256,uint256)"(
      owner?: PromiseOrValue<string> | null,
      holder?: PromiseOrValue<string> | null,
      amount?: null,
      contractDuration?: null,
      lockDuration?: null,
      totalDurationElapsed?: null
    ): CompletedEventFilter;
    Completed(
      owner?: PromiseOrValue<string> | null,
      holder?: PromiseOrValue<string> | null,
      amount?: null,
      contractDuration?: null,
      lockDuration?: null,
      totalDurationElapsed?: null
    ): CompletedEventFilter;
  };

  estimateGas: {
    amountVested(overrides?: CallOverrides): Promise<BigNumber>;

    cancel(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    canceled(overrides?: CallOverrides): Promise<BigNumber>;

    cliff(overrides?: CallOverrides): Promise<BigNumber>;

    completed(overrides?: CallOverrides): Promise<BigNumber>;

    daysLeftToCancel(overrides?: CallOverrides): Promise<BigNumber>;

    daysLeftToWithdraw(overrides?: CallOverrides): Promise<BigNumber>;

    duration(overrides?: CallOverrides): Promise<BigNumber>;

    holder(overrides?: CallOverrides): Promise<BigNumber>;

    lock(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    start(overrides?: CallOverrides): Promise<BigNumber>;

    token(overrides?: CallOverrides): Promise<BigNumber>;

    withdraw(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    amountVested(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    cancel(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    canceled(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    cliff(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    completed(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    daysLeftToCancel(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    daysLeftToWithdraw(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    duration(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    holder(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    lock(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    start(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    token(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    withdraw(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
