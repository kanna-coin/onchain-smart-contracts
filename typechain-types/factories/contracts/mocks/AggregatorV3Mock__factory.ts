/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Signer,
  utils,
  Contract,
  ContractFactory,
  BigNumberish,
  Overrides,
} from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type {
  AggregatorV3Mock,
  AggregatorV3MockInterface,
} from "../../../contracts/mocks/AggregatorV3Mock";

const _abi = [
  {
    inputs: [
      {
        internalType: "uint256",
        name: "price",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnershipTransferred",
    type: "event",
  },
  {
    inputs: [],
    name: "decimals",
    outputs: [
      {
        internalType: "uint8",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [],
    name: "description",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint80",
        name: "_roundId",
        type: "uint80",
      },
    ],
    name: "getRoundData",
    outputs: [
      {
        internalType: "uint80",
        name: "",
        type: "uint80",
      },
      {
        internalType: "int256",
        name: "",
        type: "int256",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
      {
        internalType: "uint80",
        name: "",
        type: "uint80",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "latestRoundData",
    outputs: [
      {
        internalType: "uint80",
        name: "",
        type: "uint80",
      },
      {
        internalType: "int256",
        name: "answer",
        type: "int256",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
      {
        internalType: "uint80",
        name: "",
        type: "uint80",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "renounceOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "price",
        type: "uint256",
      },
    ],
    name: "setPrice",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "version",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x60a06040526008608052348015610014575f80fd5b506040516104c33803806104c383398101604081905261003391610093565b61003c33610044565b6001556100aa565b5f80546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b5f602082840312156100a3575f80fd5b5051919050565b6080516104026100c15f395f60aa01526104025ff3fe608060405234801561000f575f80fd5b506004361061009f575f3560e01c80638da5cb5b116100725780639a6fc8f5116100585780639a6fc8f51461012d578063f2fde38b1461017f578063feaf968c14610192575f80fd5b80638da5cb5b1461010057806391b7f5ed1461011a575f80fd5b8063313ce567146100a357806354fd4d50146100d9578063715018a6146100e75780637284e416146100f1575b5f80fd5b60405160ff7f00000000000000000000000000000000000000000000000000000000000000001681526020015b60405180910390f35b6040515f81526020016100d0565b6100ef61019f565b005b60606040516100d09190610314565b5f546040516001600160a01b0390911681526020016100d0565b6100ef61012836600461035f565b6101b2565b61014861013b366004610376565b505f908190819081908190565b6040805169ffffffffffffffffffff968716815260208101959095528401929092526060830152909116608082015260a0016100d0565b6100ef61018d3660046103a6565b6101bf565b6001545f90818080610148565b6101a7610254565b6101b05f6102ad565b565b6101ba610254565b600155565b6101c7610254565b6001600160a01b0381166102485760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f646472657373000000000000000000000000000000000000000000000000000060648201526084015b60405180910390fd5b610251816102ad565b50565b5f546001600160a01b031633146101b05760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161023f565b5f80546001600160a01b038381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b5f6020808352835180828501525f5b8181101561033f57858101830151858201604001528201610323565b505f604082860101526040601f19601f8301168501019250505092915050565b5f6020828403121561036f575f80fd5b5035919050565b5f60208284031215610386575f80fd5b813569ffffffffffffffffffff8116811461039f575f80fd5b9392505050565b5f602082840312156103b6575f80fd5b81356001600160a01b038116811461039f575f80fdfea2646970667358221220b5538f4d9384241d15b8580a3293319961a8f1fed2d217a6f0b2aa33a4b25d4564736f6c63430008150033";

type AggregatorV3MockConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: AggregatorV3MockConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class AggregatorV3Mock__factory extends ContractFactory {
  constructor(...args: AggregatorV3MockConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    price: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<AggregatorV3Mock> {
    return super.deploy(price, overrides || {}) as Promise<AggregatorV3Mock>;
  }
  override getDeployTransaction(
    price: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(price, overrides || {});
  }
  override attach(address: string): AggregatorV3Mock {
    return super.attach(address) as AggregatorV3Mock;
  }
  override connect(signer: Signer): AggregatorV3Mock__factory {
    return super.connect(signer) as AggregatorV3Mock__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): AggregatorV3MockInterface {
    return new utils.Interface(_abi) as AggregatorV3MockInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): AggregatorV3Mock {
    return new Contract(address, _abi, signerOrProvider) as AggregatorV3Mock;
  }
}
