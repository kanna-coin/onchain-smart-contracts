/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Signer,
  utils,
  Contract,
  ContractFactory,
  BigNumberish,
  Overrides,
} from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type {
  AggregatorV3Mock,
  AggregatorV3MockInterface,
} from "../../../contracts/mocks/AggregatorV3Mock";

const _abi = [
  {
    inputs: [
      {
        internalType: "uint256",
        name: "price",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnershipTransferred",
    type: "event",
  },
  {
    inputs: [],
    name: "decimals",
    outputs: [
      {
        internalType: "uint8",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [],
    name: "description",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint80",
        name: "_roundId",
        type: "uint80",
      },
    ],
    name: "getRoundData",
    outputs: [
      {
        internalType: "uint80",
        name: "",
        type: "uint80",
      },
      {
        internalType: "int256",
        name: "",
        type: "int256",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
      {
        internalType: "uint80",
        name: "",
        type: "uint80",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "latestRoundData",
    outputs: [
      {
        internalType: "uint80",
        name: "",
        type: "uint80",
      },
      {
        internalType: "int256",
        name: "answer",
        type: "int256",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
      {
        internalType: "uint80",
        name: "",
        type: "uint80",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "renounceOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "price",
        type: "uint256",
      },
    ],
    name: "setPrice",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "version",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x60a0604052600860ff1660809060ff1681525034801561001e57600080fd5b50604051610a33380380610a3383398181016040528101906100409190610170565b61005c61005161006960201b60201c565b61007160201b60201c565b806001819055505061019d565b600033905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600080fd5b6000819050919050565b61014d8161013a565b811461015857600080fd5b50565b60008151905061016a81610144565b92915050565b60006020828403121561018657610185610135565b5b60006101948482850161015b565b91505092915050565b60805161087b6101b860003960006101ac015261087b6000f3fe608060405234801561001057600080fd5b50600436106100935760003560e01c80638da5cb5b116100665780638da5cb5b146100fc57806391b7f5ed1461011a5780639a6fc8f514610136578063f2fde38b1461016a578063feaf968c1461018657610093565b8063313ce5671461009857806354fd4d50146100b6578063715018a6146100d45780637284e416146100de575b600080fd5b6100a06101a8565b6040516100ad9190610449565b60405180910390f35b6100be6101d0565b6040516100cb919061047d565b60405180910390f35b6100dc6101d5565b005b6100e66101e9565b6040516100f39190610528565b60405180910390f35b6101046101ee565b604051610111919061058b565b60405180910390f35b610134600480360381019061012f91906105d7565b610217565b005b610150600480360381019061014b9190610646565b610229565b60405161016195949392919061069b565b60405180910390f35b610184600480360381019061017f919061071a565b61023a565b005b61018e6102bd565b60405161019f95949392919061069b565b60405180910390f35b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b600090565b6101dd6102e3565b6101e76000610361565b565b606090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b61021f6102e3565b8060018190555050565b600080600080600091939590929450565b6102426102e3565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036102b1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102a8906107b9565b60405180910390fd5b6102ba81610361565b50565b600080600080600060015493506000846000806000945094509450945094509091929394565b6102eb610425565b73ffffffffffffffffffffffffffffffffffffffff166103096101ee565b73ffffffffffffffffffffffffffffffffffffffff161461035f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161035690610825565b60405180910390fd5b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600033905090565b600060ff82169050919050565b6104438161042d565b82525050565b600060208201905061045e600083018461043a565b92915050565b6000819050919050565b61047781610464565b82525050565b6000602082019050610492600083018461046e565b92915050565b600081519050919050565b600082825260208201905092915050565b60005b838110156104d25780820151818401526020810190506104b7565b60008484015250505050565b6000601f19601f8301169050919050565b60006104fa82610498565b61050481856104a3565b93506105148185602086016104b4565b61051d816104de565b840191505092915050565b6000602082019050818103600083015261054281846104ef565b905092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006105758261054a565b9050919050565b6105858161056a565b82525050565b60006020820190506105a0600083018461057c565b92915050565b600080fd5b6105b481610464565b81146105bf57600080fd5b50565b6000813590506105d1816105ab565b92915050565b6000602082840312156105ed576105ec6105a6565b5b60006105fb848285016105c2565b91505092915050565b600069ffffffffffffffffffff82169050919050565b61062381610604565b811461062e57600080fd5b50565b6000813590506106408161061a565b92915050565b60006020828403121561065c5761065b6105a6565b5b600061066a84828501610631565b91505092915050565b61067c81610604565b82525050565b6000819050919050565b61069581610682565b82525050565b600060a0820190506106b06000830188610673565b6106bd602083018761068c565b6106ca604083018661046e565b6106d7606083018561046e565b6106e46080830184610673565b9695505050505050565b6106f78161056a565b811461070257600080fd5b50565b600081359050610714816106ee565b92915050565b6000602082840312156107305761072f6105a6565b5b600061073e84828501610705565b91505092915050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b60006107a36026836104a3565b91506107ae82610747565b604082019050919050565b600060208201905081810360008301526107d281610796565b9050919050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b600061080f6020836104a3565b915061081a826107d9565b602082019050919050565b6000602082019050818103600083015261083e81610802565b905091905056fea264697066735822122058d785829ef09d79b951cf9d9c25c622100f46d15c0c12527cffef04a217d24864736f6c63430008110033";

type AggregatorV3MockConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: AggregatorV3MockConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class AggregatorV3Mock__factory extends ContractFactory {
  constructor(...args: AggregatorV3MockConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    price: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<AggregatorV3Mock> {
    return super.deploy(price, overrides || {}) as Promise<AggregatorV3Mock>;
  }
  override getDeployTransaction(
    price: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(price, overrides || {});
  }
  override attach(address: string): AggregatorV3Mock {
    return super.attach(address) as AggregatorV3Mock;
  }
  override connect(signer: Signer): AggregatorV3Mock__factory {
    return super.connect(signer) as AggregatorV3Mock__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): AggregatorV3MockInterface {
    return new utils.Interface(_abi) as AggregatorV3MockInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): AggregatorV3Mock {
    return new Contract(address, _abi, signerOrProvider) as AggregatorV3Mock;
  }
}
